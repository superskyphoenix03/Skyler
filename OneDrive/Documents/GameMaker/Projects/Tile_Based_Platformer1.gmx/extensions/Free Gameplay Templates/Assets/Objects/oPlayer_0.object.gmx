<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParPlayer</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if its a new room or a back to previous room

if global.prevRoom = true                           // If we got back to previous room..
{
    x = oExitDoor.x - sprite_width;                 
    y = oExitDoor.y + oExitDoor.sprite_height/2;    // ..our position is on fron of the ExitDoor
    global.prevRoom = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init player

// ------ GAME CAMERA ----------------------------------- //
// Create the Camera that will follow the player...
if (!instance_exists(oCamera))
    instance_create(x, y, oCamera);
// ...and init its position
view_xview[0] = max(0, min(x - view_wport[0]/2, room_width  - view_wport[0]));
view_yview[0] = max(0, min(y - view_hport[0]/2 - sprite_height/2, room_height - view_hport[0]));
// ------------------------------------------------------ //

// ----- MOVEMENT VARS ---------------------------------- //
// Input control vars
var kLeft, kRight, kJump, kJumpRelease;
// Movement speed
h = 0;
v = 0;
// Max movement speed
maxH = 7.0;
// Jump and gravity variables
jumpHeight   = 6.0;
gravityForce = 0.5;
maxFallSpeed = 7.0;
// Check collisions below
onGround = false;
// ----------------------------------------------------- //

// ----- PLAYER STATES INFO ---------------------------- //
// States
IDLE     = 10;
RUN      = 11;
JUMP     = 12;
DEAD     = 13;
// Facings
RIGHT =  1;
LEFT  = -1;
// Initialize player's properties
state  = IDLE;
facing = RIGHT;
// ---------------------------------------------------- //
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Actual collision checks and properties updates

//Update state properties
image_xscale = facing; // Player sprite always looks on facing direction

// COLLISIONS AND POSITION UPDATE ------------------------- //
// Vertical
repeat(abs(v)) {
    if (!place_meeting(x, y + sign(v), oParSolid))
        y += sign(v); //If player don't collide under or above, update y position
    else {
        v = 0; // If he collides, can't go further...
        break; // ..and we stop checking vertical collisions this frame
    }
}
// Horizontal
repeat(abs(h)) {  
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); //If player don't collide left or right, update x position
    else {
        h = 0; // If he collides, can't go further...
        break; // ..and we stop checking horizontal collisions this frame
    }
}
// -------------------------------------------------------- //

// ------ WIN AND LOOSE CONDITIONS ------------------------ //
// If player falls off the room, "dies" (we restart the room)
if (y &gt; room_height + sprite_height/2)
    room_restart();
// -------------------------------------------------------- //
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Previous frame checks

// Check if we're on the ground
onGround = place_meeting(x,y+1,oParSolid);

// Idle state always if anything changes
state = IDLE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Check input controls (for keyboard and joypad)
checkInput();

// Gravity
if (!onGround) {
    state = JUMP;
    if v &lt; maxFallSpeed
        v += gravityForce;      // Make player fall (but with a maxFallSpeed limit!)
}

// Left input
if (kLeft and !kRight)
{
    facing = LEFT;              // Face player to the left
    h = -maxH;                  // Apply right speed
        
    if (onGround)               // If touch ground, show Run animation
        state = RUN;
}

// Right input
if (kRight and !kLeft)
{
    facing = RIGHT;             //Face player to the right
    h = maxH;                   // Apply right speed
    if (onGround)               // If touch ground, show Run animation
        state = RUN;
}

// No moving inputs
if (!kRight and !kLeft)
    h = 0                   // Stop when not moving inputs
    
// Jump input
if (kJump &amp;&amp; onGround)      // If jump and touching ground..
{
    v = -jumpHeight;        // ..give jump momentum to player..
    state = JUMP;           // ..and show jump animation
} 
else 
{
    if (kJumpRelease)       // If stop pressing jump key..
    {
        if (v &lt; 0) 
            v *= 0.25;      // ..rapidly slow down our jump momentum and let gravity do its job!
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States machine

switch (state) {
    case IDLE: 
        image_speed = 0.15;
        sprite_index = sPlayerIdle;
    break;
    
    case RUN: 
        image_speed = 0.5; 
        sprite_index = sPlayerRun;
    break;
    
    case JUMP:
        image_speed = 0.5; 
        // Jump and fall
        if (v &lt;= 0) 
            sprite_index = sPlayerJump;  
        else
            sprite_index = sPlayerFall;
            
        if image_index &gt;= image_number-1
            image_speed = 0;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oExitDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reach the exit door

// If we reach an exit door, we go to the next room (if there are any next room!)
if room_next(room) != -1
{
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
